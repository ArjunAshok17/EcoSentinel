{"ast":null,"code":"var _jsxFileName = \"/Users/arnavrastogi/Downloads/gsc/src/Map.js\";\n/*import React, { Component } from \"react\";\nimport ee from \"@google/earthengine\";\n\nclass Map extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          selectedCountry: null,\n        };\n        this.clearDrawing = this.clearDrawing.bind(this);\n      }\n\n  componentDidMount() {\n    // Load the Google Maps API\n    const script = document.createElement(\"script\");\n    script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyCwz8tYryeQJeA_CI2nOvxzAwpQd1c80Pc&libraries=drawing&v=3.44`;\n    script.async = true;\n    document.body.appendChild(script);\n    script.onload = () => {\n      // Initialize the map and drawing manager\n      this.initMap();\n    };\n  }\n\n  initMap() {\n    // Initialize the Google Map\n    const map = new window.google.maps.Map(document.getElementById(\"map\"), {\n      center: { lat: 37.76, lng: -122.45 },\n      zoom: 3,\n    });\n  \n    // Initialize the drawing manager\n    this.drawingManager = new window.google.maps.drawing.DrawingManager({\n      drawingMode: window.google.maps.drawing.OverlayType.RECTANGLE,\n      drawingControl: true,\n      drawingControlOptions: {\n        position: window.google.maps.ControlPosition.TOP_CENTER,\n        drawingModes: [window.google.maps.drawing.OverlayType.RECTANGLE],\n      },\n      rectangleOptions: {\n        fillColor: \"#00FF00\",\n        fillOpacity: 0.2,\n        strokeWeight: 2,\n        strokeColor: \"#00FF00\",\n        clickable: true,\n        editable: true,\n        draggable: true,\n      },\n    });\n  \n    // Add the drawing manager to the map\n    this.drawingManager.setMap(map);\n  \n    // Listen for rectangle complete event\n    window.google.maps.event.addListener(this.drawingManager, \"rectanglecomplete\", (rectangle) => {\n      // Get the rectangle's bounds and convert to Earth Engine geometry\n      const bounds = rectangle.getBounds();\n      const ne = bounds.getNorthEast();\n      const sw = bounds.getSouthWest();\n      const geometry = ee.Geometry.Rectangle([sw.lng(), sw.lat(), ne.lng(), ne.lat()]);\n  \n      // Load a Sentinel-2 image collection and add it to the map\n      const collection = ee.ImageCollection(\"COPERNICUS/S2_SR\")\n        .filterBounds(geometry)\n        .filterDate(\"2022-01-01\", \"2022-03-01\")\n        .median()\n        .clip(geometry);\n  \n      const visParams = { bands: [\"B4\", \"B3\", \"B2\"], min: 0, max: 3000 };\n  \n      map.overlayMapTypes.insertAt(\n        0,\n        new ee.MapTypeOverlay({ name: \"Sentinel-2 SR\", imageCollection: collection, visParams: visParams })\n      );\n      this.setState({ selectedCountry: null });\n    });\n  }\n\n  clearDrawing() {\n    // Loop through all the overlays added to the map and remove them\n    const overlays = this.drawingManager.getMap().overlays;\n    for (let i = 0; i < overlays.length; i++) {\n      overlays.getAt(i).setMap(null);\n    }\n  \n    // Clear the drawing manager's overlays array\n    this.drawingManager.set(\"overlays\", []);\n  \n    // Reset the drawing mode to rectangle\n    this.drawingManager.setDrawingMode(window.google.maps.drawing.OverlayType.RECTANGLE);\n  \n    // Set the map for the drawing manager\n    this.drawingManager.setMap(this.map);\n  \n    // Reset the state\n    this.setState({ selectedCountry: null });\n  }\n  \n  \n\n  render() {\n    return (\n      <div>\n        <div id=\"map\" style={{ width: \"100%\", height: \"500px\" }}></div>\n        <button onClick={this.clearDrawing}>Clear</button>\n      </div>\n    );\n  }  \n}\n\nexport default Map;*/\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport CountrySelector from \"./CountrySelector\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initMap = () => {\n      // Initialize the Google Maps API\n      const map = new window.google.maps.Map(document.getElementById(\"map\"), {\n        center: {\n          lat: 0,\n          lng: 0\n        },\n        zoom: 2\n      });\n\n      // Initialize the drawing manager\n      const drawingManager = new window.google.maps.drawing.DrawingManager({\n        drawingControl: true,\n        drawingControlOptions: {\n          position: window.google.maps.ControlPosition.TOP_CENTER,\n          drawingModes: [window.google.maps.drawing.OverlayType.POLYGON, window.google.maps.drawing.OverlayType.RECTANGLE]\n        }\n      });\n\n      // Add event listeners to the drawing manager\n      window.google.maps.event.addListener(drawingManager, \"overlaycomplete\", event => {\n        const {\n          overlay\n        } = event;\n\n        // Add the drawn shape to the state and set its map\n        const {\n          drawnShapes\n        } = this.state;\n        drawnShapes.push(overlay);\n        this.setState({\n          drawnShapes\n        });\n\n        // Disable drawing mode\n        drawingManager.setDrawingMode(null);\n      });\n\n      // Set the map and drawing manager in the state\n      this.setState({\n        map,\n        drawingManager\n      });\n    };\n    this.handleCountrySelect = country => {\n      // Set the selected country in the state\n      this.setState({\n        selectedCountry: country\n      });\n\n      // Get the map bounds for the selected country\n      const {\n        map\n      } = this.state;\n      const geocoder = new window.google.maps.Geocoder();\n      geocoder.geocode({\n        address: country\n      }, (results, status) => {\n        if (status === \"OK\") {\n          const bounds = results[0].geometry.bounds;\n          map.fitBounds(bounds);\n\n          // Show the drawing manager\n          this.state.drawingManager.setMap(map);\n        }\n      });\n    };\n    this.clearDrawing = () => {\n      // Loop through all the drawn shapes and remove them from the map\n      const {\n        drawnShapes\n      } = this.state;\n      drawnShapes.forEach(shape => {\n        shape.setMap(null);\n      });\n\n      // Clear the drawing manager's overlays array\n      this.state.drawingManager.set(\"overlays\", []);\n\n      // Reset the drawing mode to rectangle\n      this.state.drawingManager.setDrawingMode(window.google.maps.drawing.OverlayType.RECTANGLE);\n    };\n    this.state = {\n      selectedCountry: null,\n      map: null,\n      drawingManager: null,\n      drawnShapes: []\n    };\n  }\n  componentDidMount() {\n    // Load the Google Maps API script\n    const script = document.createElement(\"script\");\n    script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyCwz8tYryeQJeA_CI2nOvxzAwpQd1c80Pc&libraries=drawing&v=3.44`;\n    script.async = true;\n    script.onload = this.initMap;\n    document.body.appendChild(script);\n  }\n  render() {\n    const {\n      selectedCountry\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(CountrySelector, {\n        onCountrySelect: this.handleCountrySelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), selectedCountry && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"map\",\n          style: {\n            height: \"500px\",\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.clearDrawing,\n          children: \"Clear Drawing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Map;","map":{"version":3,"names":["React","ReactDOM","CountrySelector","jsxDEV","_jsxDEV","Map","Component","constructor","props","initMap","map","window","google","maps","document","getElementById","center","lat","lng","zoom","drawingManager","drawing","DrawingManager","drawingControl","drawingControlOptions","position","ControlPosition","TOP_CENTER","drawingModes","OverlayType","POLYGON","RECTANGLE","event","addListener","overlay","drawnShapes","state","push","setState","setDrawingMode","handleCountrySelect","country","selectedCountry","geocoder","Geocoder","geocode","address","results","status","bounds","geometry","fitBounds","setMap","clearDrawing","forEach","shape","set","componentDidMount","script","createElement","src","async","onload","body","appendChild","render","children","onCountrySelect","fileName","_jsxFileName","lineNumber","columnNumber","id","style","height","width","onClick"],"sources":["/Users/arnavrastogi/Downloads/gsc/src/Map.js"],"sourcesContent":["/*import React, { Component } from \"react\";\nimport ee from \"@google/earthengine\";\n\nclass Map extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          selectedCountry: null,\n        };\n        this.clearDrawing = this.clearDrawing.bind(this);\n      }\n\n  componentDidMount() {\n    // Load the Google Maps API\n    const script = document.createElement(\"script\");\n    script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyCwz8tYryeQJeA_CI2nOvxzAwpQd1c80Pc&libraries=drawing&v=3.44`;\n    script.async = true;\n    document.body.appendChild(script);\n    script.onload = () => {\n      // Initialize the map and drawing manager\n      this.initMap();\n    };\n  }\n\n  initMap() {\n    // Initialize the Google Map\n    const map = new window.google.maps.Map(document.getElementById(\"map\"), {\n      center: { lat: 37.76, lng: -122.45 },\n      zoom: 3,\n    });\n  \n    // Initialize the drawing manager\n    this.drawingManager = new window.google.maps.drawing.DrawingManager({\n      drawingMode: window.google.maps.drawing.OverlayType.RECTANGLE,\n      drawingControl: true,\n      drawingControlOptions: {\n        position: window.google.maps.ControlPosition.TOP_CENTER,\n        drawingModes: [window.google.maps.drawing.OverlayType.RECTANGLE],\n      },\n      rectangleOptions: {\n        fillColor: \"#00FF00\",\n        fillOpacity: 0.2,\n        strokeWeight: 2,\n        strokeColor: \"#00FF00\",\n        clickable: true,\n        editable: true,\n        draggable: true,\n      },\n    });\n  \n    // Add the drawing manager to the map\n    this.drawingManager.setMap(map);\n  \n    // Listen for rectangle complete event\n    window.google.maps.event.addListener(this.drawingManager, \"rectanglecomplete\", (rectangle) => {\n      // Get the rectangle's bounds and convert to Earth Engine geometry\n      const bounds = rectangle.getBounds();\n      const ne = bounds.getNorthEast();\n      const sw = bounds.getSouthWest();\n      const geometry = ee.Geometry.Rectangle([sw.lng(), sw.lat(), ne.lng(), ne.lat()]);\n  \n      // Load a Sentinel-2 image collection and add it to the map\n      const collection = ee.ImageCollection(\"COPERNICUS/S2_SR\")\n        .filterBounds(geometry)\n        .filterDate(\"2022-01-01\", \"2022-03-01\")\n        .median()\n        .clip(geometry);\n  \n      const visParams = { bands: [\"B4\", \"B3\", \"B2\"], min: 0, max: 3000 };\n  \n      map.overlayMapTypes.insertAt(\n        0,\n        new ee.MapTypeOverlay({ name: \"Sentinel-2 SR\", imageCollection: collection, visParams: visParams })\n      );\n      this.setState({ selectedCountry: null });\n    });\n  }\n\n  clearDrawing() {\n    // Loop through all the overlays added to the map and remove them\n    const overlays = this.drawingManager.getMap().overlays;\n    for (let i = 0; i < overlays.length; i++) {\n      overlays.getAt(i).setMap(null);\n    }\n  \n    // Clear the drawing manager's overlays array\n    this.drawingManager.set(\"overlays\", []);\n  \n    // Reset the drawing mode to rectangle\n    this.drawingManager.setDrawingMode(window.google.maps.drawing.OverlayType.RECTANGLE);\n  \n    // Set the map for the drawing manager\n    this.drawingManager.setMap(this.map);\n  \n    // Reset the state\n    this.setState({ selectedCountry: null });\n  }\n  \n  \n\n  render() {\n    return (\n      <div>\n        <div id=\"map\" style={{ width: \"100%\", height: \"500px\" }}></div>\n        <button onClick={this.clearDrawing}>Clear</button>\n      </div>\n    );\n  }  \n}\n\nexport default Map;*/\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport CountrySelector from \"./CountrySelector\";\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedCountry: null,\n      map: null,\n      drawingManager: null,\n      drawnShapes: [],\n    };\n  }\n\n  componentDidMount() {\n    // Load the Google Maps API script\n    const script = document.createElement(\"script\");\n    script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyCwz8tYryeQJeA_CI2nOvxzAwpQd1c80Pc&libraries=drawing&v=3.44`;\n    script.async = true;\n    script.onload = this.initMap;\n    document.body.appendChild(script);\n  }\n\n  initMap = () => {\n    // Initialize the Google Maps API\n    const map = new window.google.maps.Map(document.getElementById(\"map\"), {\n      center: { lat: 0, lng: 0 },\n      zoom: 2,\n    });\n\n    // Initialize the drawing manager\n    const drawingManager = new window.google.maps.drawing.DrawingManager({\n      drawingControl: true,\n      drawingControlOptions: {\n        position: window.google.maps.ControlPosition.TOP_CENTER,\n        drawingModes: [\n          window.google.maps.drawing.OverlayType.POLYGON,\n          window.google.maps.drawing.OverlayType.RECTANGLE,\n        ],\n      },\n    });\n\n    // Add event listeners to the drawing manager\n    window.google.maps.event.addListener(drawingManager, \"overlaycomplete\", (event) => {\n      const { overlay } = event;\n\n      // Add the drawn shape to the state and set its map\n      const { drawnShapes } = this.state;\n      drawnShapes.push(overlay);\n      this.setState({ drawnShapes });\n\n      // Disable drawing mode\n      drawingManager.setDrawingMode(null);\n    });\n\n    // Set the map and drawing manager in the state\n    this.setState({ map, drawingManager });\n  };\n\n  handleCountrySelect = (country) => {\n    // Set the selected country in the state\n    this.setState({ selectedCountry: country });\n\n    // Get the map bounds for the selected country\n    const { map } = this.state;\n    const geocoder = new window.google.maps.Geocoder();\n    geocoder.geocode({ address: country }, (results, status) => {\n      if (status === \"OK\") {\n        const bounds = results[0].geometry.bounds;\n        map.fitBounds(bounds);\n\n        // Show the drawing manager\n        this.state.drawingManager.setMap(map);\n      }\n    });\n  };\n\n  clearDrawing = () => {\n    // Loop through all the drawn shapes and remove them from the map\n    const { drawnShapes } = this.state;\n    drawnShapes.forEach((shape) => {\n      shape.setMap(null);\n    });\n\n    // Clear the drawing manager's overlays array\n    this.state.drawingManager.set(\"overlays\", []);\n\n    // Reset the drawing mode to rectangle\n    this.state.drawingManager.setDrawingMode(\n      window.google.maps.drawing.OverlayType.RECTANGLE\n    );\n  };\n\n  render() {\n    const { selectedCountry } = this.state;\n    return (\n      <div>\n        <CountrySelector onCountrySelect={this.handleCountrySelect} />\n        {selectedCountry && (\n          <div>\n            <div id=\"map\" style={{ height: \"500px\", width: \"100%\" }}></div>\n            <button onClick={this.clearDrawing}>Clear Drawing</button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Map;"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}