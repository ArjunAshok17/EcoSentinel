{"ast":null,"code":"var _jsxFileName = \"/Users/arnavrastogi/Downloads/gsc/src/Map.js\";\n/*import React, { Component } from \"react\";\nimport ee from \"@google/earthengine\";\n\nclass Map extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          selectedCountry: null,\n        };\n        this.clearDrawing = this.clearDrawing.bind(this);\n      }\n\n  componentDidMount() {\n    // Load the Google Maps API\n    const script = document.createElement(\"script\");\n    script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyCwz8tYryeQJeA_CI2nOvxzAwpQd1c80Pc&libraries=drawing&v=3.44`;\n    script.async = true;\n    document.body.appendChild(script);\n    script.onload = () => {\n      // Initialize the map and drawing manager\n      this.initMap();\n    };\n  }\n\n  initMap() {\n    // Initialize the Google Map\n    const map = new window.google.maps.Map(document.getElementById(\"map\"), {\n      center: { lat: 37.76, lng: -122.45 },\n      zoom: 3,\n    });\n  \n    // Initialize the drawing manager\n    this.drawingManager = new window.google.maps.drawing.DrawingManager({\n      drawingMode: window.google.maps.drawing.OverlayType.RECTANGLE,\n      drawingControl: true,\n      drawingControlOptions: {\n        position: window.google.maps.ControlPosition.TOP_CENTER,\n        drawingModes: [window.google.maps.drawing.OverlayType.RECTANGLE],\n      },\n      rectangleOptions: {\n        fillColor: \"#00FF00\",\n        fillOpacity: 0.2,\n        strokeWeight: 2,\n        strokeColor: \"#00FF00\",\n        clickable: true,\n        editable: true,\n        draggable: true,\n      },\n    });\n  \n    // Add the drawing manager to the map\n    this.drawingManager.setMap(map);\n  \n    // Listen for rectangle complete event\n    window.google.maps.event.addListener(this.drawingManager, \"rectanglecomplete\", (rectangle) => {\n      // Get the rectangle's bounds and convert to Earth Engine geometry\n      const bounds = rectangle.getBounds();\n      const ne = bounds.getNorthEast();\n      const sw = bounds.getSouthWest();\n      const geometry = ee.Geometry.Rectangle([sw.lng(), sw.lat(), ne.lng(), ne.lat()]);\n  \n      // Load a Sentinel-2 image collection and add it to the map\n      const collection = ee.ImageCollection(\"COPERNICUS/S2_SR\")\n        .filterBounds(geometry)\n        .filterDate(\"2022-01-01\", \"2022-03-01\")\n        .median()\n        .clip(geometry);\n  \n      const visParams = { bands: [\"B4\", \"B3\", \"B2\"], min: 0, max: 3000 };\n  \n      map.overlayMapTypes.insertAt(\n        0,\n        new ee.MapTypeOverlay({ name: \"Sentinel-2 SR\", imageCollection: collection, visParams: visParams })\n      );\n      this.setState({ selectedCountry: null });\n    });\n  }\n\n  clearDrawing() {\n    // Loop through all the overlays added to the map and remove them\n    const overlays = this.drawingManager.getMap().overlays;\n    for (let i = 0; i < overlays.length; i++) {\n      overlays.getAt(i).setMap(null);\n    }\n  \n    // Clear the drawing manager's overlays array\n    this.drawingManager.set(\"overlays\", []);\n  \n    // Reset the drawing mode to rectangle\n    this.drawingManager.setDrawingMode(window.google.maps.drawing.OverlayType.RECTANGLE);\n  \n    // Set the map for the drawing manager\n    this.drawingManager.setMap(this.map);\n  \n    // Reset the state\n    this.setState({ selectedCountry: null });\n  }\n  \n  \n\n  render() {\n    return (\n      <div>\n        <div id=\"map\" style={{ width: \"100%\", height: \"500px\" }}></div>\n        <button onClick={this.clearDrawing}>Clear</button>\n      </div>\n    );\n  }  \n}\n\nexport default Map;*/\n\nimport React, { Component } from \"react\";\nimport ee from \"@google/earthengine\";\nimport CountrySelector from \"./CountrySelector\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedCountry: null,\n      map: null,\n      drawingManager: null,\n      drawnShapes: []\n    };\n    this.clearDrawing = this.clearDrawing.bind(this);\n  }\n  componentDidMount() {\n    // Load the Google Maps API\n    const script = document.createElement(\"script\");\n    script.src = `https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=drawing&v=3.44`;\n    script.async = true;\n    document.body.appendChild(script);\n    script.onload = () => {\n      // Initialize the map and drawing manager\n      this.initMap();\n    };\n  }\n  initMap() {\n    // Initialize the Google Map\n    const map = new window.google.maps.Map(document.getElementById(\"map\"), {\n      center: {\n        lat: 0,\n        lng: 0\n      },\n      zoom: 3\n    });\n    this.setState({\n      map\n    });\n\n    // Initialize the drawing manager\n    const drawingManager = new window.google.maps.drawing.DrawingManager({\n      drawingMode: window.google.maps.drawing.OverlayType.RECTANGLE,\n      drawingControl: true,\n      drawingControlOptions: {\n        position: window.google.maps.ControlPosition.TOP_CENTER,\n        drawingModes: [window.google.maps.drawing.OverlayType.RECTANGLE]\n      },\n      rectangleOptions: {\n        fillColor: \"#00FF00\",\n        fillOpacity: 0.2,\n        strokeWeight: 2,\n        strokeColor: \"#00FF00\",\n        clickable: true,\n        editable: true,\n        draggable: true\n      }\n    });\n    this.setState({\n      drawingManager\n    });\n\n    // Add the drawing manager to the map\n    drawingManager.setMap(map);\n\n    // Listen for rectangle complete event\n    window.google.maps.event.addListener(drawingManager, \"rectanglecomplete\", rectangle => {\n      // Get the rectangle's bounds and convert to Earth Engine geometry\n      const bounds = rectangle.getBounds();\n      const ne = bounds.getNorthEast();\n      const sw = bounds.getSouthWest();\n      const geometry = ee.Geometry.Rectangle([sw.lng(), sw.lat(), ne.lng(), ne.lat()]);\n\n      // Load a Sentinel-2 image collection and add it to the map\n      const collection = ee.ImageCollection(\"COPERNICUS/S2_SR\").filterBounds(geometry).filterDate(\"2022-01-01\", \"2022-03-01\").median().clip(geometry);\n      const visParams = {\n        bands: [\"B4\", \"B3\", \"B2\"],\n        min: 0,\n        max: 3000\n      };\n      map.overlayMapTypes.insertAt(0, new ee.MapTypeOverlay({\n        name: \"Sentinel-2 SR\",\n        imageCollection: collection,\n        visParams: visParams\n      }));\n\n      // Add the drawn rectangle to the state\n      const drawnShapes = [...this.state.drawnShapes, rectangle];\n      this.setState({\n        drawnShapes\n      });\n    });\n  }\n  clearDrawing() {\n    // Loop through all the drawn shapes and remove them from the map\n    const {\n      drawnShapes\n    } = this.state;\n    drawnShapes.forEach(shape => {\n      shape.setMap(null);\n    });\n\n    // Clear the drawing manager's overlays array\n    this.state.drawingManager.set(\"overlays\", []);\n\n    // Reset the drawing mode to rectangle\n    this.state.drawingManager.setDrawingMode(window.google.maps.drawing.OverlayType.RECTANGLE);\n    // Reset the state\n    this.setState({\n      selectedCountry: null,\n      drawnShapes: []\n    });\n  }\n  render() {\n    const {\n      selectedCountry\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: selectedCountry ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: selectedCountry.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"map\",\n          style: {\n            width: \"100%\",\n            height: \"500px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.clearDrawing,\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 5\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Select a country\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(CountrySelector, {\n          onCountrySelect: this.handleCountrySelect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 5\n    }, this);\n  }\n}\nexport default Map;","map":{"version":3,"names":["React","Component","ee","CountrySelector","jsxDEV","_jsxDEV","Map","constructor","props","state","selectedCountry","map","drawingManager","drawnShapes","clearDrawing","bind","componentDidMount","script","document","createElement","src","async","body","appendChild","onload","initMap","window","google","maps","getElementById","center","lat","lng","zoom","setState","drawing","DrawingManager","drawingMode","OverlayType","RECTANGLE","drawingControl","drawingControlOptions","position","ControlPosition","TOP_CENTER","drawingModes","rectangleOptions","fillColor","fillOpacity","strokeWeight","strokeColor","clickable","editable","draggable","setMap","event","addListener","rectangle","bounds","getBounds","ne","getNorthEast","sw","getSouthWest","geometry","Geometry","Rectangle","collection","ImageCollection","filterBounds","filterDate","median","clip","visParams","bands","min","max","overlayMapTypes","insertAt","MapTypeOverlay","name","imageCollection","forEach","shape","set","setDrawingMode","render","children","fileName","_jsxFileName","lineNumber","columnNumber","id","style","width","height","onClick","onCountrySelect","handleCountrySelect"],"sources":["/Users/arnavrastogi/Downloads/gsc/src/Map.js"],"sourcesContent":["/*import React, { Component } from \"react\";\nimport ee from \"@google/earthengine\";\n\nclass Map extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          selectedCountry: null,\n        };\n        this.clearDrawing = this.clearDrawing.bind(this);\n      }\n\n  componentDidMount() {\n    // Load the Google Maps API\n    const script = document.createElement(\"script\");\n    script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyCwz8tYryeQJeA_CI2nOvxzAwpQd1c80Pc&libraries=drawing&v=3.44`;\n    script.async = true;\n    document.body.appendChild(script);\n    script.onload = () => {\n      // Initialize the map and drawing manager\n      this.initMap();\n    };\n  }\n\n  initMap() {\n    // Initialize the Google Map\n    const map = new window.google.maps.Map(document.getElementById(\"map\"), {\n      center: { lat: 37.76, lng: -122.45 },\n      zoom: 3,\n    });\n  \n    // Initialize the drawing manager\n    this.drawingManager = new window.google.maps.drawing.DrawingManager({\n      drawingMode: window.google.maps.drawing.OverlayType.RECTANGLE,\n      drawingControl: true,\n      drawingControlOptions: {\n        position: window.google.maps.ControlPosition.TOP_CENTER,\n        drawingModes: [window.google.maps.drawing.OverlayType.RECTANGLE],\n      },\n      rectangleOptions: {\n        fillColor: \"#00FF00\",\n        fillOpacity: 0.2,\n        strokeWeight: 2,\n        strokeColor: \"#00FF00\",\n        clickable: true,\n        editable: true,\n        draggable: true,\n      },\n    });\n  \n    // Add the drawing manager to the map\n    this.drawingManager.setMap(map);\n  \n    // Listen for rectangle complete event\n    window.google.maps.event.addListener(this.drawingManager, \"rectanglecomplete\", (rectangle) => {\n      // Get the rectangle's bounds and convert to Earth Engine geometry\n      const bounds = rectangle.getBounds();\n      const ne = bounds.getNorthEast();\n      const sw = bounds.getSouthWest();\n      const geometry = ee.Geometry.Rectangle([sw.lng(), sw.lat(), ne.lng(), ne.lat()]);\n  \n      // Load a Sentinel-2 image collection and add it to the map\n      const collection = ee.ImageCollection(\"COPERNICUS/S2_SR\")\n        .filterBounds(geometry)\n        .filterDate(\"2022-01-01\", \"2022-03-01\")\n        .median()\n        .clip(geometry);\n  \n      const visParams = { bands: [\"B4\", \"B3\", \"B2\"], min: 0, max: 3000 };\n  \n      map.overlayMapTypes.insertAt(\n        0,\n        new ee.MapTypeOverlay({ name: \"Sentinel-2 SR\", imageCollection: collection, visParams: visParams })\n      );\n      this.setState({ selectedCountry: null });\n    });\n  }\n\n  clearDrawing() {\n    // Loop through all the overlays added to the map and remove them\n    const overlays = this.drawingManager.getMap().overlays;\n    for (let i = 0; i < overlays.length; i++) {\n      overlays.getAt(i).setMap(null);\n    }\n  \n    // Clear the drawing manager's overlays array\n    this.drawingManager.set(\"overlays\", []);\n  \n    // Reset the drawing mode to rectangle\n    this.drawingManager.setDrawingMode(window.google.maps.drawing.OverlayType.RECTANGLE);\n  \n    // Set the map for the drawing manager\n    this.drawingManager.setMap(this.map);\n  \n    // Reset the state\n    this.setState({ selectedCountry: null });\n  }\n  \n  \n\n  render() {\n    return (\n      <div>\n        <div id=\"map\" style={{ width: \"100%\", height: \"500px\" }}></div>\n        <button onClick={this.clearDrawing}>Clear</button>\n      </div>\n    );\n  }  \n}\n\nexport default Map;*/\n\nimport React, { Component } from \"react\";\nimport ee from \"@google/earthengine\";\nimport CountrySelector from \"./CountrySelector\";\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedCountry: null,\n      map: null,\n      drawingManager: null,\n      drawnShapes: [],\n    };\n    this.clearDrawing = this.clearDrawing.bind(this);\n  }\n\n  componentDidMount() {\n    // Load the Google Maps API\n    const script = document.createElement(\"script\");\n    script.src = `https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=drawing&v=3.44`;\n    script.async = true;\n    document.body.appendChild(script);\n    script.onload = () => {\n      // Initialize the map and drawing manager\n      this.initMap();\n    };\n  }\n\n  initMap() {\n    // Initialize the Google Map\n    const map = new window.google.maps.Map(document.getElementById(\"map\"), {\n      center: { lat: 0, lng: 0 },\n      zoom: 3,\n    });\n    this.setState({ map });\n\n    // Initialize the drawing manager\n    const drawingManager = new window.google.maps.drawing.DrawingManager({\n      drawingMode: window.google.maps.drawing.OverlayType.RECTANGLE,\n      drawingControl: true,\n      drawingControlOptions: {\n        position: window.google.maps.ControlPosition.TOP_CENTER,\n        drawingModes: [window.google.maps.drawing.OverlayType.RECTANGLE],\n      },\n      rectangleOptions: {\n        fillColor: \"#00FF00\",\n        fillOpacity: 0.2,\n        strokeWeight: 2,\n        strokeColor: \"#00FF00\",\n        clickable: true,\n        editable: true,\n        draggable: true,\n      },\n    });\n    this.setState({ drawingManager });\n\n    // Add the drawing manager to the map\n    drawingManager.setMap(map);\n\n    // Listen for rectangle complete event\n    window.google.maps.event.addListener(\n      drawingManager,\n      \"rectanglecomplete\",\n      (rectangle) => {\n        // Get the rectangle's bounds and convert to Earth Engine geometry\n        const bounds = rectangle.getBounds();\n        const ne = bounds.getNorthEast();\n        const sw = bounds.getSouthWest();\n        const geometry = ee.Geometry.Rectangle([\n          sw.lng(),\n          sw.lat(),\n          ne.lng(),\n          ne.lat(),\n        ]);\n\n        // Load a Sentinel-2 image collection and add it to the map\n        const collection = ee.ImageCollection(\"COPERNICUS/S2_SR\")\n          .filterBounds(geometry)\n          .filterDate(\"2022-01-01\", \"2022-03-01\")\n          .median()\n          .clip(geometry);\n\n        const visParams = { bands: [\"B4\", \"B3\", \"B2\"], min: 0, max: 3000 };\n\n        map.overlayMapTypes.insertAt(\n          0,\n          new ee.MapTypeOverlay({\n            name: \"Sentinel-2 SR\",\n            imageCollection: collection,\n            visParams: visParams,\n          })\n        );\n\n        // Add the drawn rectangle to the state\n        const drawnShapes = [...this.state.drawnShapes, rectangle];\n        this.setState({ drawnShapes });\n      }\n    );\n  }\n\n  clearDrawing() {\n    // Loop through all the drawn shapes and remove them from the map\n    const { drawnShapes } = this.state;\n    drawnShapes.forEach((shape) => {\n      shape.setMap(null);\n    });\n\n    // Clear the drawing manager's overlays array\n    this.state.drawingManager.set(\"overlays\", []);\n\n    // Reset the drawing mode to rectangle\n    this.state.drawingManager.setDrawingMode(\n      window.google.maps.drawing.OverlayType.RECTANGLE\n      );\n    // Reset the state\n    this.setState({\n    selectedCountry: null,\n    drawnShapes: [],\n  });\n}\nrender() {\n    const { selectedCountry } = this.state;\n    return (\n    <div>\n    {selectedCountry ? (\n    <div>\n    <h2>{selectedCountry.name}</h2>\n    <div id=\"map\" style={{ width: \"100%\", height: \"500px\" }}></div>\n    <button onClick={this.clearDrawing}>Clear</button>\n    </div>\n    ) : (\n    <div>\n    <h2>Select a country</h2>\n    <CountrySelector onCountrySelect={this.handleCountrySelect} />\n    </div>\n    )}\n    </div>\n    );\n    }\n}\nexport default Map;\n\n\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}