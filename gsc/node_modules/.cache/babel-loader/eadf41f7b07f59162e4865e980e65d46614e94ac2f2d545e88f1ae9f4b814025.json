{"ast":null,"code":"import React, { Component } from \"react\";\nimport ee from \"@google/earthengine\";\nclass Map extends Component {\n  componentDidMount() {\n    // Load the Google Maps API\n    const script = document.createElement(\"script\");\n    script.src = `https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY`;\n    script.async = true;\n    document.body.appendChild(script);\n    script.onload = () => {\n      // Initialize the map and drawing manager\n      this.initMap();\n    };\n  }\n  initMap() {\n    // The OAuth Client ID from the Google Developers Console.\n    const CLIENT_ID = \"YOUR_CLIENT_ID\";\n\n    // Hide the sign-in button.\n    document.getElementById(\"g-sign-in\").setAttribute(\"hidden\", \"true\");\n\n    // Initialize the Earth Engine API. Must be called once before using the API.\n    ee.initialize();\n\n    // Get a reference to the placeholder DOM element to contain the map.\n    const mapContainerEl = document.getElementById(\"map\");\n\n    // Create an interactive map inside the placeholder DOM element.\n    const map = new window.google.maps.Map(mapContainerEl, {\n      center: {\n        lat: 37.76,\n        lng: -122.45\n      },\n      zoom: 10\n    });\n\n    // Obtain reference to digital elevation model and apply algorithm to\n    // calculate slope.\n    const srtm = ee.Image(\"CGIAR/SRTM90_V4\");\n    const slope = ee.Terrain.slope(srtm);\n\n    // Create a new tile source to fetch visible tiles on demand and display them\n    // on the map.\n    const mapId = slope.getMap({\n      min: 0,\n      max: 60\n    });\n    const tileSource = new ee.layers.EarthEngineTileSource(mapId);\n\n    // Add the tile layer to the map.\n    map.overlayMapTypes.insertAt(0, new google.maps.ImageMapType({\n      getTileUrl: tileSource.getTileUrl,\n      tileSize: new google.maps.Size(256, 256),\n      name: \"Slope\"\n    }));\n\n    // Initialize the drawing manager\n    const drawingManager = new window.google.maps.drawing.DrawingManager({\n      drawingMode: window.google.maps.drawing.OverlayType.RECTANGLE,\n      drawingControl: true,\n      drawingControlOptions: {\n        position: window.google.maps.ControlPosition.TOP_CENTER,\n        drawingModes: [window.google.maps.drawing.OverlayType.RECTANGLE]\n      },\n      rectangleOptions: {\n        fillColor: \"#00FF00\",\n        fillOpacity: 0.2,\n        strokeWeight: 2,\n        strokeColor: \"#00FF00\",\n        clickable: true,\n        editable: true,\n        draggable: true\n      }\n    });\n\n    // Add the drawing manager to the map\n    drawingManager.setMap(map);\n\n    // Listen for rectangle complete event\n    window.google.maps.event.addListener(drawingManager, \"rectanglecomplete\", rectangle => {\n      // Get the rectangle's bounds and convert to Earth Engine geometry\n      const bounds = rectangle.getBounds();\n      const ne = bounds.getNorthEast();\n      const sw = bounds.getSouthWest();\n      const geometry = ee.Geometry.Rectangle([sw.lng(), sw.lat(), ne.lng(), ne.lat()]);\n\n      // Load a Sentinel-2 image collection and add it to the map\n      const collection = ee.ImageCollection(\"COPERNICUS/S2_SR\").filterBounds(geometry).filterDate(\"2022-01-01\", \"2022-03-01\").median().clip(geometry);\n      const visParams = {\n        bands: [\"B4\", \"B3\"]\n      };\n    });\n\n    // Initializes the Google auth2 module with the given client ID, then checks\n    // whether the user is currently authenticated.\n    function initClient() {\n      // Load the Google API JavaScript client library and set up sign-in.\n      gapi.load(\"client:auth2\", () => {\n        // Retrieve the client ID from the Google Cloud Console.\n        gapi.client.init({\n          clientId: CLIENT_ID,\n          scope: \"profile email\"\n        });\n        // Check whether the user is currently authenticated.\n        gapi.auth2.getAuthInstance().isSignedIn.listen(updateSignInStatus);\n        updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n      });\n    }\n\n    // Invokes the Google Sign-In API to allow the user to sign in.\n    function signIn() {\n      gapi.auth2.getAuthInstance().signIn();\n    }\n\n    // Invokes the Google Sign-Out API to sign out the current user.\n    function signOut() {\n      gapi.auth2.getAuthInstance().signOut();\n    }\n\n    // Updates the state of the \"Sign in with Google\" button depending on whether\n    // the user is signed in.\n    function updateSignInStatus(isSignedIn) {\n      // Show or hide the \"Sign in with Google\" button based on whether the user\n      // is signed in.\n      const signInButton = document.getElementById(\"g-sign-in\");\n      if (isSignedIn) {\n        signInButton.setAttribute(\"hidden\", \"true\");\n        setUpMap();\n      } else {\n        signInButton.removeAttribute(\"hidden\");\n      }\n    }\n\n    // Invokes the sign-out function when the sign-out button is clicked.\n    document.getElementById(\"g-sign-out\").onclick = signOut;\n\n    // Initializes the authentication client when the page is loaded.\n    window.onload = () => {\n      gapi.load(\"auth2\", initClient);\n    };\n\n    // Updates the sign-in button when the user clicks it.\n    function onSignInButtonClick() {\n      signIn();\n    }\n  }\n}\nexport default Map;","map":{"version":3,"names":["React","Component","ee","Map","componentDidMount","script","document","createElement","src","async","body","appendChild","onload","initMap","CLIENT_ID","getElementById","setAttribute","initialize","mapContainerEl","map","window","google","maps","center","lat","lng","zoom","srtm","Image","slope","Terrain","mapId","getMap","min","max","tileSource","layers","EarthEngineTileSource","overlayMapTypes","insertAt","ImageMapType","getTileUrl","tileSize","Size","name","drawingManager","drawing","DrawingManager","drawingMode","OverlayType","RECTANGLE","drawingControl","drawingControlOptions","position","ControlPosition","TOP_CENTER","drawingModes","rectangleOptions","fillColor","fillOpacity","strokeWeight","strokeColor","clickable","editable","draggable","setMap","event","addListener","rectangle","bounds","getBounds","ne","getNorthEast","sw","getSouthWest","geometry","Geometry","Rectangle","collection","ImageCollection","filterBounds","filterDate","median","clip","visParams","bands","initClient","gapi","load","client","init","clientId","scope","auth2","getAuthInstance","isSignedIn","listen","updateSignInStatus","get","signIn","signOut","signInButton","setUpMap","removeAttribute","onclick","onSignInButtonClick"],"sources":["/Users/arnavrastogi/Downloads/gsc/src/Map.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport ee from \"@google/earthengine\";\n\nclass Map extends Component {\n  componentDidMount() {\n    // Load the Google Maps API\n    const script = document.createElement(\"script\");\n    script.src = `https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY`;\n    script.async = true;\n    document.body.appendChild(script);\n    script.onload = () => {\n      // Initialize the map and drawing manager\n      this.initMap();\n    };\n  }\n\n  initMap() {\n    // The OAuth Client ID from the Google Developers Console.\n    const CLIENT_ID = \"YOUR_CLIENT_ID\";\n\n    // Hide the sign-in button.\n    document.getElementById(\"g-sign-in\").setAttribute(\"hidden\", \"true\");\n\n    // Initialize the Earth Engine API. Must be called once before using the API.\n    ee.initialize();\n\n    // Get a reference to the placeholder DOM element to contain the map.\n    const mapContainerEl = document.getElementById(\"map\");\n\n    // Create an interactive map inside the placeholder DOM element.\n    const map = new window.google.maps.Map(mapContainerEl, {\n      center: { lat: 37.76, lng: -122.45 },\n      zoom: 10\n    });\n\n    // Obtain reference to digital elevation model and apply algorithm to\n    // calculate slope.\n    const srtm = ee.Image(\"CGIAR/SRTM90_V4\");\n    const slope = ee.Terrain.slope(srtm);\n\n    // Create a new tile source to fetch visible tiles on demand and display them\n    // on the map.\n    const mapId = slope.getMap({ min: 0, max: 60 });\n    const tileSource = new ee.layers.EarthEngineTileSource(mapId);\n\n    // Add the tile layer to the map.\n    map.overlayMapTypes.insertAt(\n      0,\n      new google.maps.ImageMapType({\n        getTileUrl: tileSource.getTileUrl,\n        tileSize: new google.maps.Size(256, 256),\n        name: \"Slope\",\n      })\n    );\n\n    // Initialize the drawing manager\n    const drawingManager = new window.google.maps.drawing.DrawingManager({\n      drawingMode: window.google.maps.drawing.OverlayType.RECTANGLE,\n      drawingControl: true,\n      drawingControlOptions: {\n        position: window.google.maps.ControlPosition.TOP_CENTER,\n        drawingModes: [window.google.maps.drawing.OverlayType.RECTANGLE]\n      },\n      rectangleOptions: {\n        fillColor: \"#00FF00\",\n        fillOpacity: 0.2,\n        strokeWeight: 2,\n        strokeColor: \"#00FF00\",\n        clickable: true,\n        editable: true,\n        draggable: true\n      }\n    });\n\n    // Add the drawing manager to the map\n    drawingManager.setMap(map);\n\n    // Listen for rectangle complete event\n    window.google.maps.event.addListener(drawingManager, \"rectanglecomplete\", (rectangle) => {\n      // Get the rectangle's bounds and convert to Earth Engine geometry\n      const bounds = rectangle.getBounds();\n      const ne = bounds.getNorthEast();\n      const sw = bounds.getSouthWest();\n      const geometry = ee.Geometry.Rectangle([sw.lng(), sw.lat(), ne.lng(), ne.lat()]);\n\n      // Load a Sentinel-2 image collection and add it to the map\n      const collection = ee.ImageCollection(\"COPERNICUS/S2_SR\")\n        .filterBounds(geometry)\n        .filterDate(\"2022-01-01\", \"2022-03-01\")\n        .median()\n        .clip(geometry);\n\n      const visParams = { bands: [\"B4\", \"B3\"]}\n    });\n\n// Initializes the Google auth2 module with the given client ID, then checks\n// whether the user is currently authenticated.\nfunction initClient() {\n  // Load the Google API JavaScript client library and set up sign-in.\n  gapi.load(\"client:auth2\", () => {\n    // Retrieve the client ID from the Google Cloud Console.\n    gapi.client.init({\n      clientId: CLIENT_ID,\n      scope: \"profile email\",\n    });\n    // Check whether the user is currently authenticated.\n    gapi.auth2.getAuthInstance().isSignedIn.listen(updateSignInStatus);\n    updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n  });\n}\n\n// Invokes the Google Sign-In API to allow the user to sign in.\nfunction signIn() {\n  gapi.auth2.getAuthInstance().signIn();\n}\n\n// Invokes the Google Sign-Out API to sign out the current user.\nfunction signOut() {\n  gapi.auth2.getAuthInstance().signOut();\n}\n\n// Updates the state of the \"Sign in with Google\" button depending on whether\n// the user is signed in.\nfunction updateSignInStatus(isSignedIn) {\n  // Show or hide the \"Sign in with Google\" button based on whether the user\n  // is signed in.\n  const signInButton = document.getElementById(\"g-sign-in\");\n  if (isSignedIn) {\n    signInButton.setAttribute(\"hidden\", \"true\");\n    setUpMap();\n  } else {\n    signInButton.removeAttribute(\"hidden\");\n  }\n}\n\n// Invokes the sign-out function when the sign-out button is clicked.\ndocument.getElementById(\"g-sign-out\").onclick = signOut;\n\n// Initializes the authentication client when the page is loaded.\nwindow.onload = () => {\n  gapi.load(\"auth2\", initClient);\n};\n\n// Updates the sign-in button when the user clicks it.\nfunction onSignInButtonClick() {\n  signIn();\n}\n}}\nexport default Map;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}