{"ast":null,"code":"var _jsxFileName = \"/Users/arnavrastogi/Downloads/gsc/src/Map.js\";\n/*import React, { Component } from \"react\";\nimport ee from \"@google/earthengine\";\n\nclass Map extends Component {\n  componentDidMount() {\n    // Load the Google Maps API\n    const script = document.createElement(\"script\");\n    script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyCwz8tYryeQJeA_CI2nOvxzAwpQd1c80Pc&libraries=drawing&v=3.44`;\n    script.async = true;\n    document.body.appendChild(script);\n    script.onload = () => {\n      // Initialize the map and drawing manager\n      this.initMap();\n    };\n  }\n\n  initMap() {\n    // Initialize the Google Map\n    const map = new window.google.maps.Map(document.getElementById(\"map\"), {\n      center: { lat: 37.76, lng: -122.45 },\n      zoom: 10\n    });\n\n    // Initialize the drawing manager\n    const drawingManager = new window.google.maps.drawing.DrawingManager({\n      drawingMode: window.google.maps.drawing.OverlayType.RECTANGLE,\n      drawingControl: true,\n      drawingControlOptions: {\n        position: window.google.maps.ControlPosition.TOP_CENTER,\n        drawingModes: [window.google.maps.drawing.OverlayType.RECTANGLE]\n      },\n      rectangleOptions: {\n        fillColor: \"#00FF00\",\n        fillOpacity: 0.2,\n        strokeWeight: 2,\n        strokeColor: \"#00FF00\",\n        clickable: true,\n        editable: true,\n        draggable: true\n      }\n    });\n\n    // Add the drawing manager to the map\n    drawingManager.setMap(map);\n\n    // Listen for rectangle complete event\n    window.google.maps.event.addListener(drawingManager, \"rectanglecomplete\", (rectangle) => {\n      // Get the rectangle's bounds and convert to Earth Engine geometry\n      const bounds = rectangle.getBounds();\n      const ne = bounds.getNorthEast();\n      const sw = bounds.getSouthWest();\n      const geometry = ee.Geometry.Rectangle([sw.lng(), sw.lat(), ne.lng(), ne.lat()]);\n\n      // Load a Sentinel-2 image collection and add it to the map\n      const collection = ee.ImageCollection(\"COPERNICUS/S2_SR\")\n        .filterBounds(geometry)\n        .filterDate(\"2022-01-01\", \"2022-03-01\")\n        .median()\n        .clip(geometry);\n\n      const visParams = { bands: [\"B4\", \"B3\", \"B2\"], min: 0, max: 3000 };\n\n      map.overlayMapTypes.insertAt(\n        0,\n        new ee.MapTypeOverlay({ name: \"Sentinel-2 SR\", imageCollection: collection, visParams: visParams })\n      );\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"map\" style={{ width: \"100%\", height: \"500px\" }}></div>\n      </div>\n    );\n  }\n}\n\nexport default Map;*/\n\nimport React, { Component } from \"react\";\nimport ee from \"@google/earthengine\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Map extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      selectedCountry: null\n    };\n  }\n  componentDidMount() {\n    // Load the Google Maps API\n    const script = document.createElement(\"script\");\n    script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyCwz8tYryeQJeA_CI2nOvxzAwpQd1c80Pc&libraries=drawing&v=3.44`;\n    script.async = true;\n    document.body.appendChild(script);\n    script.onload = () => {\n      // Initialize the map and drawing manager\n      this.initMap();\n    };\n  }\n  initMap() {\n    // Initialize the Google Map\n    const map = new window.google.maps.Map(document.getElementById(\"map\"), {\n      center: {\n        lat: 37.76,\n        lng: -122.45\n      },\n      zoom: 3\n    });\n    const drawingManager = new google.maps.drawing.DrawingManager({\n      drawingMode: google.maps.drawing.OverlayType.POLYGON,\n      drawingControl: true,\n      drawingControlOptions: {\n        position: google.maps.ControlPosition.TOP_CENTER,\n        drawingModes: [google.maps.drawing.OverlayType.POLYGON]\n      }\n    });\n    drawingManager.setMap(map);\n\n    // Listen for rectangle complete event\n    window.google.maps.event.addListener(this.drawingManager, \"rectanglecomplete\", rectangle => {\n      // Get the rectangle's bounds and convert to Earth Engine geometry\n      const bounds = rectangle.getBounds();\n      const ne = bounds.getNorthEast();\n      const sw = bounds.getSouthWest();\n      const geometry = ee.Geometry.Rectangle([sw.lng(), sw.lat(), ne.lng(), ne.lat()]);\n\n      // Load a Sentinel-2 image collection and add it to the map\n      const collection = ee.ImageCollection(\"COPERNICUS/S2_SR\").filterBounds(geometry).filterDate(\"2022-01-01\", \"2022-03-01\").median().clip(geometry);\n      const visParams = {\n        bands: [\"B4\", \"B3\", \"B2\"],\n        min: 0,\n        max: 3000\n      };\n      map.overlayMapTypes.insertAt(0, new ee.MapTypeOverlay({\n        name: \"Sentinel-2 SR\",\n        imageCollection: collection,\n        visParams: visParams\n      }));\n      this.setState({\n        selectedCountry: null\n      });\n    });\n  }\n  clearDrawing() {\n    this.drawingManager.setDrawingMode(null);\n    this.drawingManager.setMap(null);\n    this.drawingManager = null;\n    this.setState({\n      selectedCountry: null\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"map\",\n        style: {\n          width: \"100%\",\n          height: \"500px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.clearDrawing,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Map;","map":{"version":3,"names":["React","Component","ee","jsxDEV","_jsxDEV","Map","constructor","arguments","state","selectedCountry","componentDidMount","script","document","createElement","src","async","body","appendChild","onload","initMap","map","window","google","maps","getElementById","center","lat","lng","zoom","drawingManager","drawing","DrawingManager","drawingMode","OverlayType","POLYGON","drawingControl","drawingControlOptions","position","ControlPosition","TOP_CENTER","drawingModes","setMap","event","addListener","rectangle","bounds","getBounds","ne","getNorthEast","sw","getSouthWest","geometry","Geometry","Rectangle","collection","ImageCollection","filterBounds","filterDate","median","clip","visParams","bands","min","max","overlayMapTypes","insertAt","MapTypeOverlay","name","imageCollection","setState","clearDrawing","setDrawingMode","render","children","id","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick"],"sources":["/Users/arnavrastogi/Downloads/gsc/src/Map.js"],"sourcesContent":["/*import React, { Component } from \"react\";\nimport ee from \"@google/earthengine\";\n\nclass Map extends Component {\n  componentDidMount() {\n    // Load the Google Maps API\n    const script = document.createElement(\"script\");\n    script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyCwz8tYryeQJeA_CI2nOvxzAwpQd1c80Pc&libraries=drawing&v=3.44`;\n    script.async = true;\n    document.body.appendChild(script);\n    script.onload = () => {\n      // Initialize the map and drawing manager\n      this.initMap();\n    };\n  }\n\n  initMap() {\n    // Initialize the Google Map\n    const map = new window.google.maps.Map(document.getElementById(\"map\"), {\n      center: { lat: 37.76, lng: -122.45 },\n      zoom: 10\n    });\n\n    // Initialize the drawing manager\n    const drawingManager = new window.google.maps.drawing.DrawingManager({\n      drawingMode: window.google.maps.drawing.OverlayType.RECTANGLE,\n      drawingControl: true,\n      drawingControlOptions: {\n        position: window.google.maps.ControlPosition.TOP_CENTER,\n        drawingModes: [window.google.maps.drawing.OverlayType.RECTANGLE]\n      },\n      rectangleOptions: {\n        fillColor: \"#00FF00\",\n        fillOpacity: 0.2,\n        strokeWeight: 2,\n        strokeColor: \"#00FF00\",\n        clickable: true,\n        editable: true,\n        draggable: true\n      }\n    });\n\n    // Add the drawing manager to the map\n    drawingManager.setMap(map);\n\n    // Listen for rectangle complete event\n    window.google.maps.event.addListener(drawingManager, \"rectanglecomplete\", (rectangle) => {\n      // Get the rectangle's bounds and convert to Earth Engine geometry\n      const bounds = rectangle.getBounds();\n      const ne = bounds.getNorthEast();\n      const sw = bounds.getSouthWest();\n      const geometry = ee.Geometry.Rectangle([sw.lng(), sw.lat(), ne.lng(), ne.lat()]);\n\n      // Load a Sentinel-2 image collection and add it to the map\n      const collection = ee.ImageCollection(\"COPERNICUS/S2_SR\")\n        .filterBounds(geometry)\n        .filterDate(\"2022-01-01\", \"2022-03-01\")\n        .median()\n        .clip(geometry);\n\n      const visParams = { bands: [\"B4\", \"B3\", \"B2\"], min: 0, max: 3000 };\n\n      map.overlayMapTypes.insertAt(\n        0,\n        new ee.MapTypeOverlay({ name: \"Sentinel-2 SR\", imageCollection: collection, visParams: visParams })\n      );\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"map\" style={{ width: \"100%\", height: \"500px\" }}></div>\n      </div>\n    );\n  }\n}\n\nexport default Map;*/\n\nimport React, { Component } from \"react\";\nimport ee from \"@google/earthengine\";\n\nclass Map extends Component {\n  state = {\n    selectedCountry: null,\n  };\n\n  componentDidMount() {\n    // Load the Google Maps API\n    const script = document.createElement(\"script\");\n    script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyCwz8tYryeQJeA_CI2nOvxzAwpQd1c80Pc&libraries=drawing&v=3.44`;\n    script.async = true;\n    document.body.appendChild(script);\n    script.onload = () => {\n      // Initialize the map and drawing manager\n      this.initMap();\n    };\n  }\n\n  initMap() {\n    // Initialize the Google Map\n    const map = new window.google.maps.Map(document.getElementById(\"map\"), {\n      center: { lat: 37.76, lng: -122.45 },\n      zoom: 3,\n    });\n  \n    const drawingManager = new google.maps.drawing.DrawingManager({\n        drawingMode: google.maps.drawing.OverlayType.POLYGON,\n        drawingControl: true,\n        drawingControlOptions: {\n          position: google.maps.ControlPosition.TOP_CENTER,\n          drawingModes: [\n            google.maps.drawing.OverlayType.POLYGON\n          ]\n        }\n      });\n      \n      drawingManager.setMap(map);\n      \n  \n    // Listen for rectangle complete event\n    window.google.maps.event.addListener(this.drawingManager, \"rectanglecomplete\", (rectangle) => {\n      // Get the rectangle's bounds and convert to Earth Engine geometry\n      const bounds = rectangle.getBounds();\n      const ne = bounds.getNorthEast();\n      const sw = bounds.getSouthWest();\n      const geometry = ee.Geometry.Rectangle([sw.lng(), sw.lat(), ne.lng(), ne.lat()]);\n  \n      // Load a Sentinel-2 image collection and add it to the map\n      const collection = ee.ImageCollection(\"COPERNICUS/S2_SR\")\n        .filterBounds(geometry)\n        .filterDate(\"2022-01-01\", \"2022-03-01\")\n        .median()\n        .clip(geometry);\n  \n      const visParams = { bands: [\"B4\", \"B3\", \"B2\"], min: 0, max: 3000 };\n  \n      map.overlayMapTypes.insertAt(\n        0,\n        new ee.MapTypeOverlay({ name: \"Sentinel-2 SR\", imageCollection: collection, visParams: visParams })\n      );\n      this.setState({ selectedCountry: null });\n    });\n  }\n\n  clearDrawing() {\n    this.drawingManager.setDrawingMode(null);\n    this.drawingManager.setMap(null);\n    this.drawingManager = null;\n    this.setState({ selectedCountry: null });\n  }  \n\n  render() {\n    return (\n      <div>\n        <div id=\"map\" style={{ width: \"100%\", height: \"500px\" }}></div>\n        <button onClick={this.clearDrawing}>Clear</button>\n      </div>\n    );\n  }  \n}\n\nexport default Map;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}