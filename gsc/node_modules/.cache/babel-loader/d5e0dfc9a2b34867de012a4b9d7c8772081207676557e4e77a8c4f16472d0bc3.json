{"ast":null,"code":"var _jsxFileName = \"/Users/arnavrastogi/Downloads/gsc/src/Map.js\";\n/*import React, { Component } from \"react\";\nimport ee from \"@google/earthengine\";\n\nclass Map extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          selectedCountry: null,\n        };\n        this.clearDrawing = this.clearDrawing.bind(this);\n      }\n\n  componentDidMount() {\n    // Load the Google Maps API\n    const script = document.createElement(\"script\");\n    script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyCwz8tYryeQJeA_CI2nOvxzAwpQd1c80Pc&libraries=drawing&v=3.44?client=570329943228-gr2gm28ha8kkd3ueum00mijoaiihbjmt.apps.googleusercontent.com`;\n    script.async = true;\n    document.body.appendChild(script);\n    script.onload = () => {\n      // Initialize the map and drawing manager\n      this.initMap();\n    };\n  }\n\n  initMap() {\n    // Initialize the Google Map\n    const map = new window.google.maps.Map(document.getElementById(\"map\"), {\n      center: { lat: 37.76, lng: -122.45 },\n      zoom: 3,\n    });\n  \n    // Initialize the drawing manager\n    this.drawingManager = new window.google.maps.drawing.DrawingManager({\n      drawingMode: window.google.maps.drawing.OverlayType.RECTANGLE,\n      drawingControl: true,\n      drawingControlOptions: {\n        position: window.google.maps.ControlPosition.TOP_CENTER,\n        drawingModes: [window.google.maps.drawing.OverlayType.RECTANGLE],\n      },\n      rectangleOptions: {\n        fillColor: \"#00FF00\",\n        fillOpacity: 0.2,\n        strokeWeight: 2,\n        strokeColor: \"#00FF00\",\n        clickable: true,\n        editable: true,\n        draggable: true,\n      },\n    });\n  \n    // Add the drawing manager to the map\n    this.drawingManager.setMap(map);\n  \n    // Listen for rectangle complete event\n    window.google.maps.event.addListener(this.drawingManager, \"rectanglecomplete\", (rectangle) => {\n      // Get the rectangle's bounds and convert to Earth Engine geometry\n      const bounds = rectangle.getBounds();\n      const ne = bounds.getNorthEast();\n      const sw = bounds.getSouthWest();\n      const geometry = ee.Geometry.Rectangle([sw.lng(), sw.lat(), ne.lng(), ne.lat()]);\n  \n      // Load a Sentinel-2 image collection and add it to the map\n      const collection = ee.ImageCollection(\"COPERNICUS/S2_SR\")\n        .filterBounds(geometry)\n        .filterDate(\"2022-01-01\", \"2022-03-01\")\n        .median()\n        .clip(geometry);\n  \n      const visParams = { bands: [\"B4\", \"B3\", \"B2\"], min: 0, max: 3000 };\n  \n      map.overlayMapTypes.insertAt(\n        0,\n        new ee.MapTypeOverlay({ name: \"Sentinel-2 SR\", imageCollection: collection, visParams: visParams })\n      );\n      this.setState({ selectedCountry: null });\n    });\n  }\n\n  clearDrawing() {\n    // Remove all shapes from the map\n    this.drawingManager.setMap(null);\n  \n    // Reset the drawing mode to rectangle\n    this.drawingManager.setDrawingMode(window.google.maps.drawing.OverlayType.RECTANGLE);\n  \n    // Set the map for the drawing manager\n    this.drawingManager.setMap(this.map);\n  \n    // Reset the state\n    this.setState({ selectedCountry: null });\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"map\" style={{ width: \"100%\", height: \"500px\" }}></div>\n        <button onClick={this.clearDrawing}>Clear</button>\n      </div>\n    );\n  }  \n}\n\nexport default Map;*/\n\nimport React, { Component } from \"react\";\nimport ee from \"@google/earthengine\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedCountry: null\n    };\n    this.clearDrawing = this.clearDrawing.bind(this);\n  }\n  componentDidMount() {\n    // Load the Google Maps API\n    const script = document.createElement(\"script\");\n    script.src = \"https://maps.googleapis.com/maps/api/js?key=<YOUR_API_KEY>&libraries=drawing\";\n    script.async = true;\n    document.body.appendChild(script);\n    script.onload = () => {\n      // Initialize the map and drawing manager\n      this.initMap();\n    };\n  }\n  initMap() {\n    // Initialize the Google Map\n    const map = new window.google.maps.Map(document.getElementById(\"map\"), {\n      center: {\n        lat: 37.76,\n        lng: -122.45\n      },\n      zoom: 3\n    });\n\n    // Initialize the drawing manager\n    this.drawingManager = new window.google.maps.drawing.DrawingManager({\n      drawingMode: window.google.maps.drawing.OverlayType.RECTANGLE,\n      drawingControl: true,\n      drawingControlOptions: {\n        position: window.google.maps.ControlPosition.TOP_CENTER,\n        drawingModes: [window.google.maps.drawing.OverlayType.RECTANGLE]\n      },\n      rectangleOptions: {\n        fillColor: \"#00FF00\",\n        fillOpacity: 0.2,\n        strokeWeight: 2,\n        strokeColor: \"#00FF00\",\n        clickable: true,\n        editable: true,\n        draggable: true\n      }\n    });\n\n    // Add the drawing manager to the map\n    this.drawingManager.setMap(map);\n\n    // Listen for rectangle complete event\n    window.google.maps.event.addListener(this.drawingManager, \"rectanglecomplete\", rectangle => {\n      // Get the rectangle's bounds and convert to Earth Engine geometry\n      const bounds = rectangle.getBounds();\n      const ne = bounds.getNorthEast();\n      const sw = bounds.getSouthWest();\n      const geometry = ee.Geometry.Rectangle([sw.lng(), sw.lat(), ne.lng(), ne.lat()]);\n\n      // Load a Sentinel-2 image collection and add it to the map\n      const collection = ee.ImageCollection(\"COPERNICUS/S2_SR\").filterBounds(geometry).filterDate(\"2022-01-01\", \"2022-03-01\").median().clip(geometry);\n      const visParams = {\n        bands: [\"B4\", \"B3\", \"B2\"],\n        min: 0,\n        max: 3000\n      };\n      map.overlayMapTypes.insertAt(0, new ee.MapTypeOverlay({\n        name: \"Sentinel-2 SR\",\n        imageCollection: collection,\n        visParams: visParams\n      }));\n\n      // Save the drawn shape in all_overlays array and set selection\n      all_overlays.push({\n        overlay: rectangle,\n        type: \"rectangle\"\n      });\n      setSelection(rectangle);\n\n      // Reset the state\n      this.setState({\n        selectedCountry: null\n      });\n    });\n  }\n  clearDrawing() {\n    // Remove all shapes from the map\n    this.drawingManager.setMap(null);\n\n    // Reset the drawing mode to rectangle\n    this.drawingManager.setDrawingMode(window.google.maps.drawing.OverlayType.RECTANGLE);\n\n    // Set the map for the drawing manager\n    this.drawingManager.setMap(this.map);\n\n    // Reset the state\n    this.setState({\n      selectedCountry: null\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"map\",\n        style: {\n          width: \"100%\",\n          height: \"500px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.clearDrawing,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Map;","map":{"version":3,"names":["React","Component","ee","jsxDEV","_jsxDEV","Map","constructor","props","state","selectedCountry","clearDrawing","bind","componentDidMount","script","document","createElement","src","async","body","appendChild","onload","initMap","map","window","google","maps","getElementById","center","lat","lng","zoom","drawingManager","drawing","DrawingManager","drawingMode","OverlayType","RECTANGLE","drawingControl","drawingControlOptions","position","ControlPosition","TOP_CENTER","drawingModes","rectangleOptions","fillColor","fillOpacity","strokeWeight","strokeColor","clickable","editable","draggable","setMap","event","addListener","rectangle","bounds","getBounds","ne","getNorthEast","sw","getSouthWest","geometry","Geometry","Rectangle","collection","ImageCollection","filterBounds","filterDate","median","clip","visParams","bands","min","max","overlayMapTypes","insertAt","MapTypeOverlay","name","imageCollection","all_overlays","push","overlay","type","setSelection","setState","setDrawingMode","render","children","id","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick"],"sources":["/Users/arnavrastogi/Downloads/gsc/src/Map.js"],"sourcesContent":["/*import React, { Component } from \"react\";\nimport ee from \"@google/earthengine\";\n\nclass Map extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          selectedCountry: null,\n        };\n        this.clearDrawing = this.clearDrawing.bind(this);\n      }\n\n  componentDidMount() {\n    // Load the Google Maps API\n    const script = document.createElement(\"script\");\n    script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyCwz8tYryeQJeA_CI2nOvxzAwpQd1c80Pc&libraries=drawing&v=3.44?client=570329943228-gr2gm28ha8kkd3ueum00mijoaiihbjmt.apps.googleusercontent.com`;\n    script.async = true;\n    document.body.appendChild(script);\n    script.onload = () => {\n      // Initialize the map and drawing manager\n      this.initMap();\n    };\n  }\n\n  initMap() {\n    // Initialize the Google Map\n    const map = new window.google.maps.Map(document.getElementById(\"map\"), {\n      center: { lat: 37.76, lng: -122.45 },\n      zoom: 3,\n    });\n  \n    // Initialize the drawing manager\n    this.drawingManager = new window.google.maps.drawing.DrawingManager({\n      drawingMode: window.google.maps.drawing.OverlayType.RECTANGLE,\n      drawingControl: true,\n      drawingControlOptions: {\n        position: window.google.maps.ControlPosition.TOP_CENTER,\n        drawingModes: [window.google.maps.drawing.OverlayType.RECTANGLE],\n      },\n      rectangleOptions: {\n        fillColor: \"#00FF00\",\n        fillOpacity: 0.2,\n        strokeWeight: 2,\n        strokeColor: \"#00FF00\",\n        clickable: true,\n        editable: true,\n        draggable: true,\n      },\n    });\n  \n    // Add the drawing manager to the map\n    this.drawingManager.setMap(map);\n  \n    // Listen for rectangle complete event\n    window.google.maps.event.addListener(this.drawingManager, \"rectanglecomplete\", (rectangle) => {\n      // Get the rectangle's bounds and convert to Earth Engine geometry\n      const bounds = rectangle.getBounds();\n      const ne = bounds.getNorthEast();\n      const sw = bounds.getSouthWest();\n      const geometry = ee.Geometry.Rectangle([sw.lng(), sw.lat(), ne.lng(), ne.lat()]);\n  \n      // Load a Sentinel-2 image collection and add it to the map\n      const collection = ee.ImageCollection(\"COPERNICUS/S2_SR\")\n        .filterBounds(geometry)\n        .filterDate(\"2022-01-01\", \"2022-03-01\")\n        .median()\n        .clip(geometry);\n  \n      const visParams = { bands: [\"B4\", \"B3\", \"B2\"], min: 0, max: 3000 };\n  \n      map.overlayMapTypes.insertAt(\n        0,\n        new ee.MapTypeOverlay({ name: \"Sentinel-2 SR\", imageCollection: collection, visParams: visParams })\n      );\n      this.setState({ selectedCountry: null });\n    });\n  }\n\n  clearDrawing() {\n    // Remove all shapes from the map\n    this.drawingManager.setMap(null);\n  \n    // Reset the drawing mode to rectangle\n    this.drawingManager.setDrawingMode(window.google.maps.drawing.OverlayType.RECTANGLE);\n  \n    // Set the map for the drawing manager\n    this.drawingManager.setMap(this.map);\n  \n    // Reset the state\n    this.setState({ selectedCountry: null });\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"map\" style={{ width: \"100%\", height: \"500px\" }}></div>\n        <button onClick={this.clearDrawing}>Clear</button>\n      </div>\n    );\n  }  \n}\n\nexport default Map;*/\n\nimport React, { Component } from \"react\";\nimport ee from \"@google/earthengine\";\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedCountry: null,\n    };\n    this.clearDrawing = this.clearDrawing.bind(this);\n  }\n\n  componentDidMount() {\n    // Load the Google Maps API\n    const script = document.createElement(\"script\");\n    script.src =\n      \"https://maps.googleapis.com/maps/api/js?key=<YOUR_API_KEY>&libraries=drawing\";\n    script.async = true;\n    document.body.appendChild(script);\n    script.onload = () => {\n      // Initialize the map and drawing manager\n      this.initMap();\n    };\n  }\n\n  initMap() {\n    // Initialize the Google Map\n    const map = new window.google.maps.Map(document.getElementById(\"map\"), {\n      center: { lat: 37.76, lng: -122.45 },\n      zoom: 3,\n    });\n\n    // Initialize the drawing manager\n    this.drawingManager = new window.google.maps.drawing.DrawingManager({\n      drawingMode: window.google.maps.drawing.OverlayType.RECTANGLE,\n      drawingControl: true,\n      drawingControlOptions: {\n        position: window.google.maps.ControlPosition.TOP_CENTER,\n        drawingModes: [window.google.maps.drawing.OverlayType.RECTANGLE],\n      },\n      rectangleOptions: {\n        fillColor: \"#00FF00\",\n        fillOpacity: 0.2,\n        strokeWeight: 2,\n        strokeColor: \"#00FF00\",\n        clickable: true,\n        editable: true,\n        draggable: true,\n      },\n    });\n\n    // Add the drawing manager to the map\n    this.drawingManager.setMap(map);\n\n    // Listen for rectangle complete event\n    window.google.maps.event.addListener(\n      this.drawingManager,\n      \"rectanglecomplete\",\n      (rectangle) => {\n        // Get the rectangle's bounds and convert to Earth Engine geometry\n        const bounds = rectangle.getBounds();\n        const ne = bounds.getNorthEast();\n        const sw = bounds.getSouthWest();\n        const geometry = ee.Geometry.Rectangle([\n          sw.lng(),\n          sw.lat(),\n          ne.lng(),\n          ne.lat(),\n        ]);\n\n        // Load a Sentinel-2 image collection and add it to the map\n        const collection = ee\n          .ImageCollection(\"COPERNICUS/S2_SR\")\n          .filterBounds(geometry)\n          .filterDate(\"2022-01-01\", \"2022-03-01\")\n          .median()\n          .clip(geometry);\n\n        const visParams = { bands: [\"B4\", \"B3\", \"B2\"], min: 0, max: 3000 };\n\n        map.overlayMapTypes.insertAt(\n          0,\n          new ee.MapTypeOverlay({\n            name: \"Sentinel-2 SR\",\n            imageCollection: collection,\n            visParams: visParams,\n          })\n        );\n\n        // Save the drawn shape in all_overlays array and set selection\n        all_overlays.push({\n          overlay: rectangle,\n          type: \"rectangle\",\n        });\n        setSelection(rectangle);\n\n        // Reset the state\n        this.setState({ selectedCountry: null });\n      }\n    );\n  }\n\n  clearDrawing() {\n    // Remove all shapes from the map\n    this.drawingManager.setMap(null);\n\n    // Reset the drawing mode to rectangle\n    this.drawingManager.setDrawingMode(\n      window.google.maps.drawing.OverlayType.RECTANGLE\n    );\n\n    // Set the map for the drawing manager\n    this.drawingManager.setMap(this.map);\n  \n    // Reset the state\n    this.setState({ selectedCountry: null });\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"map\" style={{ width: \"100%\", height: \"500px\" }}></div>\n        <button onClick={this.clearDrawing}>Clear</button>\n      </div>\n    );\n  }  \n}\n\nexport default Map;"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}